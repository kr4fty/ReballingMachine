#include <Arduino.h>
#include "config.h"
#include <PID_v1.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
#include <max6675.h>

uint32_t zcNextTime=0, nextTime; 
uint64_t pulseOn, pulseOff, shootingAngle=0;
bool zcFlag=false, pulseFlag=false, pulseStatus;
long int zcCounter=0;

void IRAM_ATTR zc_isr() {
  if(!zcFlag){
    zcFlag = true;
    zcNextTime=millis()+WINDOW_INTERRUPT;
    pulseFlag = true;
    pulseOn = micros()+shootingAngle;
  }
}

Adafruit_ST7735 lcd = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

MAX6675 thermocouple(TH1_CS);

double Setpoint, Input, Output;
//double Kp=100, Ki=.5, Kd=50;

#define WindowSize 200
unsigned long windowStartTime;
PID myPID = PID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);
 
// the setup function runs once when you press reset or power the board
void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(ZC_PIN, INPUT);

  digitalWrite(RELAY_PIN,LOW);

  windowStartTime = millis();

  Setpoint = 45;
  //turn the PID on
  myPID.SetSampleTime(25);
  myPID.SetOutputLimits(0, ZC_MAX_ANGLE);
  myPID.SetMode(AUTOMATIC);
  myPID.SetTunings(Kp, Ki, Kd);

   // Use this initializer if using a 1.8" TFT screen:
  lcd.initR(INITR_BLACKTAB);      // Init ST7735S chip, black tab
  lcd.setTextColor(ST77XX_WHITE, ST77XX_BLACK); // Para sobreescribir puntos
  lcd.fillScreen(ST77XX_BLACK);
  lcd.setRotation(1);
  lcd.setTextSize(MIDLE_TEXT);
  lcd.setCursor(0, 0);
  lcd.setTextColor(ST77XX_YELLOW, ST77XX_BLACK);
  lcd.print("Press key");
  lcd.setTextColor(ST77XX_WHITE, ST77XX_BLACK);

  while(digitalRead(BUTTON));
  while(!digitalRead(BUTTON));

  delay(200);

  while(digitalRead(BUTTON));
  while(!digitalRead(BUTTON));

  attachInterrupt(digitalPinToInterrupt(ZC_PIN), zc_isr,HIGH);
  nextTime=millis() + WINDOW_1Seg;

  // DEBUG
  #ifdef DEBUG
  Serial.begin(9600);
  #endif
}

// the loop function runs over and over again forever

double oldInput=0;
#ifdef ALPHA
double InputFiltered;
#endif
void loop() {
  #ifdef ALPHA
  InputFiltered = thermocouple.readCelsius();
  #endif

  while(1){
    //Senso temperatura cada 200mSeg (max que lee el sensor max6675)
    if (millis() > windowStartTime){
      Input = thermocouple.readCelsius();
      #ifdef ALPHA
      InputFiltered = (ALPHA*Input) + ((1-ALPHA)*InputFiltered);
      Input = InputFiltered;
      #endif

      windowStartTime = millis() + WindowSize;
    }

    myPID.Compute();

    /***************************** CONTROL DE FASE ****************************/
    shootingAngle = map(Output, 0, ZC_MAX_ANGLE, 0, 10000);

    if(millis()>zcNextTime && zcFlag){
      zcFlag = false;
      zcCounter++;
    }

    // Se envia pulso de habilitacion del TRIAC
    if(micros()>pulseOn && pulseFlag){
      pulseOff = micros() + G_PULSE_WIDTH ;
      pulseStatus = HIGH;
      digitalWrite(RELAY_PIN, pulseStatus);
      pulseFlag = false;
    }
    if(micros()>pulseOff && !pulseFlag && pulseStatus){
      pulseStatus = LOW;
      digitalWrite(RELAY_PIN, pulseStatus);    
    }

    if(millis()>nextTime){

      if(oldInput!=Input){
        lcd.setCursor(0*6*MIDLE_TEXT, 0*8*MIDLE_TEXT);
        lcd.printf("%3d",(uint16_t)Input);
        lcd.printf(" - %3d", Output);

        oldInput = Input;

        // DEBUG
        #ifdef DEBUG
        Serial.print(0);
        Serial.print(" ");
        Serial.println(Input);
        #endif
      }

      lcd.setCursor(6*6*MIDLE_TEXT, 1*8*MIDLE_TEXT);
      lcd.setTextSize(MIDLE_TEXT);
      lcd.printf("%3d", zcCounter);
      zcCounter=0;
      nextTime=millis() + WINDOW_1Seg;
    }
  }  
}
